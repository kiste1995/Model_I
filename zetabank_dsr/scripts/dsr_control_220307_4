#!/usr/bin/env python

import rospy
import threading
import sys, select, termios, tty
import time
import os

from std_msgs.msg import String, UInt8
from dsr_msgs.msg import RobotState

from zetabank_msgs.msg import ZBDSRSetTraj, ZBDSRTrajStatus
from zetabank_msgs.msg import NavigationControlStatus

from zetabank_msgs.msg import RobotControlStatus

sys.dont_write_bytecode = True
sys.path.append( os.path.abspath(os.path.join(os.path.dirname(__file__),"../../doosan-robot/common/imp")) ) # get import path : DSR_ROBOT.py 

# for single robot 
ROBOT_ID     = "dsr01"
ROBOT_MODEL  = "m0609"
import DR_init
DR_init.__dsr__id = ROBOT_ID
DR_init.__dsr__model = ROBOT_MODEL
from DSR_ROBOT import *

bEStop_Status = 0
bTrajRunning = False
bEStop = False
sRobotState = "STANDBY"
prev_RobotState = "STANDBY"
TrajetoryNum = 0
PrevTrajetoryNum = 0
run_trajnum = 0
DSRStatus = ZBDSRSetTraj.IDLING

robotCtrlStatus = RobotControlStatus.IDLING

bStopFlag = False
bPrevStopFlag = False

set_vel = 120
set_acc = 150

trajstat = ZBDSRTrajStatus()

def shutdown():
    print("shutdown time!")
    print("shutdown time!")
    print("shutdown time!")

    pub_stop.publish(stop_mode=STOP_TYPE_QUICK)
    return 0

def getKey():
    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

msg ="""
    Control Doosan Robot!
    ---------------------
    0 : Initial position
    1 : Sample pos #1(UVC)
    2 : Sample pos #2(Spray)
    3 : Move Joint Angle(Start pos)
    4 : Move Position(End pos)
    5 : Move Position(Start pos)
    ---------------------

Ctrl-C to quit.
"""

p1 = posx(573.83, 503.16, -194.0, 0.24, 138.64, -95.72) #p1                
p2 = posx(573.83, 503.16, -194.0 + 100.0, 0.24, 138.64, -95.72) #p2
p3 = posx(595.7, -451.86, -190.22 + 100.0, 4.81, 136.69, -90.33) #p3

p4 = posx(595.7, -451.86, -190.22 + 200.0, 4.81, 136.69, -90.33) #p4
p5 = posx(573.83, 503.16, -194.0 + 200.0, 0.24, 138.64, -95.72) #p5

p6 = posx(573.83, 503.16, -194.0 + 300.0, 0.24, 138.64, -95.72) #p6
p7 = posx(595.7, -451.86, -190.22 + 300.0, 4.81, 136.69, -90.33) #p7

p8 = posx(595.7, -451.86, -190.22 + 400.0, 4.81, 136.69, -90.33) #p8
p9 = posx(573.83, 503.16, -194.0 + 400.0, 0.24, 138.64, -95.72) #p9

p10 = posx(573.83, 503.16, -194.0 + 500.0, 0.24, 138.64, -95.72) #p10
p11 = posx(595.7, -451.86, -190.22 + 500.0, 4.81, 136.69, -90.33) #p11

startpos = posj(-42.33, 89.33, 41.79, -115.64, -33.9, -8.39) #start point

np1 = posx(566.7, 247.5, 144.06, 3.83, 125.4, 1.66)
np2 = posx(566.7, -342.61, 144.06, 179.13, -129.05, -91.6)


newp1 = posx(649.66, 28.28, -100.0, 0.59, 90.09, -2.1) 
newp2 = posx(649.66, 28.28, 679.44, 1.42, 90.08, -0.41) 
start_jp = posj(1.56, 65.16, 97.32, 3.19, -69.66, -4.89)

frontpos = posj(87.5, 17.63, -107.65, 1.21, -89.4, -5.85) # front start point

HollowBK_pt1 = posx(-14.51, -244.51, 405.56, 152.05, -178.67, 58.72)
HollowBK_pt2 = posx(-266.14, -5.43, 380.55, 160.39, -177.66, 158.61)
HollowBK_pt3 = posx(3.55, 224.09, 392.11, 98.97, 178.22, -174.61)
HollowBK_pt4 = posx(423.6, 471.19, 494.41, 179.16, -90.76, -92.77)

HollowFR_pt1 = posx(-14.51, -244.51, 405.56, 152.05, -178.67, 58.72)
HollowFR_pt2 = posx(135.35, -328.37, 436.08, 153.19, -143.76, 55.61)
HollowFR_pt3 = posx(238.48, -385.41, 497.21, 169.48, -119.62, 71.84)
HollowFR_pt4 = posx(369.51, -510.95, 497.35, 1.09, 90.83, -90.91)

DeskDI_pt1 = posx(287.69, -285.95, 399.32, 171.69, -146.19, 90.06)
DeskDI_pt2 = posx(448.59, -303.45, 391.06, 7.14, 140.92, -84.1)
DeskDI_pt3 = posx(498, -289.11, 439.37, 6.21, 131.2, -89.6)
DeskDI_pt4 = posx(548.67, -67.18, 379.66, 173.43, -151.79, 36.26)
DeskDI_pt5 = posx(551.75, -63.78, 378.16, 179.28, -150.93, 43.71)
DeskDI_pt6 = posx(509.17, -78.98, 507.37, 171.47, -151.22, 36.16)

#Floor_pt1 = posx(-260.41, -272.14, 388.68, 78.48, -176.45, 108.51)
ConfRoomDI_pt2 = posx(-255.87, 43.9, 380.52, 150.85, 175.32, -125.4)
ConfRoomDI_pt3 = posx(18.65, 347.33, 329.93, 9.33, 177.98, -173.8)
ConfRoomDI_pt4 = posx(67.82, 648.05, 29.43, 77.34, 167.13, -103.36)
ConfRoomDI_pt5 = posx(96.09, 669.32, -49.21, 18.39, 158.12, 178.54)
ConfRoomDI_pt6 = posx(13.84, 674.92, -49.58, 153.32, 158.6, -6.99)

HollowDI_pt1 = posx(-14.51, -244.51, 405.56, 152.05, -178.67, 58.72)
HollowDI_pt2 = posx(139.140, -142.310 , 577.410, 9.52, 134.60, -121.36)
HollowDI_pt3 = posx(291.96, -132.500, 584.48, 8.48, 107.52, 176.31)
HollowDI_pt4 = posx(642.58, -127.700, 478.000, 2.34, 101.23, 176.33)
HollowDI_pt5 = posx(734.14, -111.39, 472.67, 4.67, 99.83, 176.29)
HollowDI_pt6 = posx(785.53, 1.43, 502.67, 1.55, 91.47, 180.0)

test_pt1 = posx(0, 0, 50, 0, 0, 0)
test_pt2 = posx(0, 0, -80, 0, 0, 0)
test_pt3 = posx(0, 0, 100, 0, 0, 0)
test_pt4 = posx(0, 0, -50, 0, 0, 0)
test_pt5 = posx(0, 0, 20, 0, 0, 0)

seg1 = posb(DR_LINE, test_pt1, radius=5)
seg2 = posb(DR_LINE, test_pt2, radius=5)
seg3 = posb(DR_LINE, test_pt3, radius=5)
seg4 = posb(DR_LINE, test_pt4, radius=5)
seg5 = posb(DR_LINE, test_pt5, radius=5)

seg_list = [seg1, seg2, seg3, seg4, seg5]

traj1_list = [HollowFR_pt2, HollowFR_pt3, HollowFR_pt4]
traj2_list = [HollowFR_pt3, HollowFR_pt2, HollowFR_pt1]

traj3_list = [HollowBK_pt2, HollowBK_pt3, HollowBK_pt4]
traj4_list = [HollowBK_pt3, HollowBK_pt2, HollowBK_pt1]

traj5_list = [DeskDI_pt1, DeskDI_pt2, DeskDI_pt3, DeskDI_pt4, DeskDI_pt5, DeskDI_pt6]
traj6_list = [DeskDI_pt4, DeskDI_pt3, DeskDI_pt2, DeskDI_pt1, HollowBK_pt1]

traj7_list = [ConfRoomDI_pt2, ConfRoomDI_pt3, ConfRoomDI_pt4, ConfRoomDI_pt5, ConfRoomDI_pt6]
traj8_list = [ConfRoomDI_pt4, ConfRoomDI_pt3, ConfRoomDI_pt2, HollowBK_pt1]

traj9_list = [HollowDI_pt2, HollowDI_pt3, HollowDI_pt4, HollowDI_pt5, HollowDI_pt6]
traj10_list = [HollowDI_pt5, HollowDI_pt4, HollowDI_pt3, HollowDI_pt2, HollowDI_pt1]

# naviStatus = NavigationControlStatus.IDLING
prevnaviStatus = NavigationControlStatus.IDLING

def CallbackRobotControlStatus(request):
    global robotCtrlStatus
    
    robotCtrlStatus = request.status
    
    print(request.status_description)


# def CallbackRunNaviCtrlStatus(request):
#     global prevnaviStatus
#     global naviStatus
    
#     naviStatus = request.status

#     if(prevnaviStatus != naviStatus):
#         mstr = request.status_description
#         print(mstr)

#         print("naviStatus : "+str(naviStatus))

#         prevnaviStatus = naviStatus


def Run_DSRTraj1():
    global run_trajnum
    global bTrajRunning

    if run_trajnum > 0 and run_trajnum <= len(traj1_list):

        print(">> Move p : %d\r" % (run_trajnum))
        movel(traj1_list[run_trajnum-1], vel=set_vel, acc = set_acc, ref=DR_BASE, mod=DR_MV_MOD_ABS)
        #bTrajRunning = True
        if run_trajnum == len(traj1_list):
            run_trajnum = 0
            #bTrajRunning = False
            print("Done moving trajectory #1\r")

            trajstat.curstatus = trajstat.COMPLETED
            trajstat.trajnum = 1
            pub_TrajStat.publish(trajstat)
            bTrajRunning = False
            run_trajnum = 1 
        else:
            run_trajnum = run_trajnum + 1

            trajstat.curstatus = trajstat.RUNNING
            trajstat.trajnum = 1

            pub_TrajStat.publish(trajstat)

def Run_DSRTraj2():
    global run_trajnum
    global bTrajRunning

    if run_trajnum > 0 and run_trajnum <= len(traj2_list):

        print(">> Move p: %d \r" % (run_trajnum))
        movel(traj2_list[run_trajnum-1], vel=set_vel, acc = set_acc, ref=DR_BASE, mod=DR_MV_MOD_ABS)

        if run_trajnum == len(traj2_list):
            run_trajnum = 0
            print("Done moving trajectory #2\r")

            trajstat.curstatus = trajstat.COMPLETED
            trajstat.trajnum = 2
            pub_TrajStat.publish(trajstat)
            bTrajRunning = False
            run_trajnum = 1 
        else:
            run_trajnum = run_trajnum + 1

            trajstat.curstatus = trajstat.RUNNING
            trajstat.trajnum = 2

            pub_TrajStat.publish(trajstat)

def Run_DSRTraj3():
    global run_trajnum
    global bTrajRunning

    if run_trajnum > 0 and run_trajnum <= len(traj3_list):

        print(">> Move p: %d \r" % (run_trajnum))
        movel(traj3_list[run_trajnum-1], vel=set_vel, acc = set_acc, ref=DR_BASE, mod=DR_MV_MOD_ABS)
        if run_trajnum == len(traj3_list):
            run_trajnum = 0
            print("Done moving trajectory #3\r")

            trajstat.curstatus = trajstat.COMPLETED
            trajstat.trajnum = 3
            pub_TrajStat.publish(trajstat)
            bTrajRunning = False
            run_trajnum = 1  

        else:
            run_trajnum = run_trajnum + 1

            trajstat.curstatus = trajstat.RUNNING
            trajstat.trajnum = 3

            pub_TrajStat.publish(trajstat)        

def Run_DSRTraj4():
    global run_trajnum
    global bTrajRunning

    if run_trajnum > 0 and run_trajnum <= len(traj4_list):

        print(">> Move p: %d \r" % (run_trajnum))
        movel(traj4_list[run_trajnum-1], vel=set_vel, acc = set_acc, ref=DR_BASE, mod=DR_MV_MOD_ABS)

        if run_trajnum == len(traj4_list):
            run_trajnum = 0
            print("Done moving trajectory #4\r")

            trajstat.curstatus = trajstat.COMPLETED
            trajstat.trajnum = 4
            pub_TrajStat.publish(trajstat)  
            bTrajRunning = False
            run_trajnum = 1
        else:
            run_trajnum = run_trajnum + 1

            trajstat.curstatus = trajstat.RUNNING
            trajstat.trajnum = 4

            pub_TrajStat.publish(trajstat)    

def Run_DSRTraj5():
    global run_trajnum
    global bTrajRunning
    global robotCtrlStatus

    if run_trajnum > 0 and run_trajnum <= len(traj5_list):

        print(">> Move p: %d \r" % (run_trajnum))
        movel(traj5_list[run_trajnum-1], vel=set_vel, acc = set_acc, ref=DR_BASE, mod=DR_MV_MOD_ABS)

        if run_trajnum == len(traj5_list):
            run_trajnum = 0
            print("Done moving trajectory #6\r")

            trajstat.curstatus = trajstat.COMPLETED
            trajstat.trajnum = 5
            pub_TrajStat.publish(trajstat)  
            bTrajRunning = False
            run_trajnum = 1
            # robotCtrlStatus = RobotControlStatus.IDLING
        else:
            run_trajnum = run_trajnum + 1

            trajstat.curstatus = trajstat.RUNNING
            trajstat.trajnum = 5
            pub_TrajStat.publish(trajstat)


def Run_DSRTraj6():
    global run_trajnum
    global bTrajRunning
    global robotCtrlStatus

    if run_trajnum > 0 and run_trajnum <= len(traj6_list):

        print(">> Move p: %d \r" % (run_trajnum))
        movel(traj6_list[run_trajnum-1], vel=set_vel, acc = set_acc, ref=DR_BASE, mod=DR_MV_MOD_ABS)

        if run_trajnum == len(traj6_list):
            run_trajnum = 0
            print("Done moving trajectory #6\r")

            trajstat.curstatus = trajstat.COMPLETED
            trajstat.trajnum = 6
            pub_TrajStat.publish(trajstat)  
            bTrajRunning = False
            run_trajnum = 1
            # robotCtrlStatus = RobotControlStatus.IDLING
        else:
            run_trajnum = run_trajnum + 1

            trajstat.curstatus = trajstat.RUNNING
            trajstat.trajnum = 6
            pub_TrajStat.publish(trajstat)  

def Run_DSRTraj7():
    global run_trajnum
    global bTrajRunning

    if run_trajnum > 0 and run_trajnum <= len(traj7_list):

        print(">> Move p: %d \r" % (run_trajnum))
        movel(traj7_list[run_trajnum-1], vel=set_vel, acc = set_acc, ref=DR_BASE, mod=DR_MV_MOD_ABS)

        if run_trajnum == len(traj7_list):
            run_trajnum = len(traj7_list) - 1
        elif run_trajnum == len(traj7_list) - 1:
            run_trajnum = len(traj7_list)
        else:
            run_trajnum = run_trajnum + 1

        trajstat.curstatus = trajstat.RUNNING
        trajstat.trajnum = 7

        pub_TrajStat.publish(trajstat)  

def Run_DSRTraj8():
    global run_trajnum
    global bTrajRunning

    if run_trajnum > 0 and run_trajnum <= len(traj8_list):

        print(">> Move p: %d \r" % (run_trajnum))
        movel(traj8_list[run_trajnum-1], vel=set_vel, acc = set_acc, ref=DR_BASE, mod=DR_MV_MOD_ABS)

        if run_trajnum == len(traj8_list):
            run_trajnum = 0
            print("Done moving trajectory #8\r")

            trajstat.curstatus = trajstat.COMPLETED
            trajstat.trajnum = 8
            pub_TrajStat.publish(trajstat)  
            bTrajRunning = False
            run_trajnum = 1
        else:
            run_trajnum = run_trajnum + 1

            trajstat.curstatus = trajstat.RUNNING
            trajstat.trajnum = 8

            pub_TrajStat.publish(trajstat)

def Run_DSRTraj9():
    global run_trajnum
    global bTrajRunning
    global robotCtrlStatus

    if run_trajnum > 0 and run_trajnum <= len(traj9_list):

        print(">> Move p : %d\r" % (run_trajnum))
        movel(traj9_list[run_trajnum-1], vel=set_vel, acc = set_acc, ref=DR_BASE, mod=DR_MV_MOD_ABS)

        if run_trajnum == len(traj9_list):
            run_trajnum = 0
            print("Done moving trajectory #9\r")

            trajstat.curstatus = trajstat.COMPLETED
            trajstat.trajnum = 9
            pub_TrajStat.publish(trajstat)
            bTrajRunning = False
            run_trajnum = 1 
            # robotCtrlStatus = RobotControlStatus.IDLING
        else:
            run_trajnum = run_trajnum + 1

            trajstat.curstatus = trajstat.RUNNING
            trajstat.trajnum = 9

            pub_TrajStat.publish(trajstat)


def Run_DSRTraj10():
    global run_trajnum
    global bTrajRunning
    global robotCtrlStatus

    if run_trajnum > 0 and run_trajnum <= len(traj10_list):

        print(">> Move p : %d\r" % (run_trajnum))
        movel(traj10_list[run_trajnum-1], vel=set_vel, acc = set_acc, ref=DR_BASE, mod=DR_MV_MOD_ABS)

        if run_trajnum == len(traj10_list):
            run_trajnum = 0
            print("Done moving trajectory #10\r")

            trajstat.curstatus = trajstat.COMPLETED
            trajstat.trajnum = 10
            pub_TrajStat.publish(trajstat)
            bTrajRunning = False
            run_trajnum = 1 
            # robotCtrlStatus = RobotControlStatus.IDLING
        else:
            run_trajnum = run_trajnum + 1

            trajstat.curstatus = trajstat.RUNNING
            trajstat.trajnum = 10

            pub_TrajStat.publish(trajstat)



def goto_startpos():
    print("Move start joint angle...\r")
    movej(startpos, vel=30, acc=40)  

def Callback_RobotState(rs):    
    global sRobotState

    sRobotState = rs.robot_state_str

def CallbackRunTraj(request):
    global TrajetoryNum
    global DSRStatus
    global run_trajnum
    global bTrajRunning

    TrajetoryNum = request.trajnum

    print("Trajectory Num : ", TrajetoryNum)

    DSRStatus = request.setstatus

    print("Set Status : ", DSRStatus)

    bTrajRunning = True



def Callback_ESTop(msg):
    global bEStop_Status
    global bEStop
    global run_trajnum
    global sRobotState
    global bTrajRunning
    # global prevnaviStatus
    # global naviStatus
    global robotCtrlStatus
    global prev_RobotState

    bEStop_Status = msg.data
    
    # 2022. 03. 03
    # if robotCtrlStatus == RobotControlStatus.NAVI or robotCtrlStatus == RobotControlStatus.UV or robotCtrlStatus == RobotControlStatus.IDLING:
    #     return
    
    if robotCtrlStatus == RobotControlStatus.DSR:

        # print("EStop Status : {}\r".format(bEStop_Status))

        # if bEStop_Status == 3 and bEStop == False:
        if bEStop_Status != 1 and bEStop == False:
            if bEStop_Status == 0:
                print("Detected Lidar Field\r")
            elif bEStop_Status == 3:
                print("Pushed E-Stop Button\r")
            if bEStop_Status == 2:
            # elif bEStop_Status == 3:
                print("Detected Lidar Field and Pushed E-Stop Button\r")

            bEStop = True
            
            prev_RobotState = sRobotState
            print("rev robot state : ", prev_RobotState)
            
            # 2022. 03. 03
            # if bTrajRunning == False:
            #     trajstat.curstatus = trajstat.ESTOP
            #     trajstat.trajnum = 0
            #     run_trajnum = 1
            #     pub_TrajStat.publish(trajstat)
            # else:
            #     trajstat.curstatus = trajstat.ESTOP
            #     trajstat.trajnum = TrajetoryNum
            #     pub_TrajStat.publish(trajstat)

        elif bEStop == True and bEStop_Status == 1:
        # elif bEStop == True and bEStop_Status == 0:
            print("Release E-stop/ Lidar detecting\r")
            bEStop = False
            
            if prev_RobotState.find("MOVING") > -1:
                print(">>> Moving Final Traj.....\r")  
                
                if TrajetoryNum is 9 and run_trajnum == len(traj9_list):
                    run_trajnum = len(traj9_list) - 1
                elif TrajetoryNum is 10 and run_trajnum == len(traj10_list):
                    run_trajnum = len(traj10_list) - 1   
                elif TrajetoryNum is 5 and run_trajnum == len(traj5_list):
                    run_trajnum = len(traj5_list) - 1  
                elif TrajetoryNum is 6 and run_trajnum == len(traj6_list):
                    run_trajnum = len(traj6_list) - 1 
                else:
                    return
                
                print(">>> Restart running : final traj.\r")                    

                trajstat.curstatus = trajstat.RESTART
                trajstat.trajnum = TrajetoryNum
                pub_TrajStat.publish(trajstat)
                
                bTrajRunning = True

                return
                 

            if  trajstat.curstatus == trajstat.RUNNING:
                
                if bTrajRunning is True:
                    if run_trajnum > 1:
                        run_trajnum = run_trajnum - 1
        
                    while(1) :
                        #print("Robot Status : {}\r".format(sRobotState))
                        if sRobotState.find("STANDBY") > -1:
                            # bEStop = False

                            print(">>> Restart running traj.\r")                    

                            trajstat.curstatus = trajstat.RESTART
                            trajstat.trajnum = TrajetoryNum
                            pub_TrajStat.publish(trajstat)

                            break

                        sleep(0.1)

                else:
                    while(1) :
                        #print("Robot Status : {}\r".format(sRobotState))
                        if sRobotState.find("STANDBY") > -1:
                            # bEStop = False

                            bTrajRunning = True

                            if TrajetoryNum is 9:
                                #if run_trajnum == len(traj9_list):
                                if run_trajnum > 1:
                                    run_trajnum = len(traj9_list)
                                    print(">>> Restart final traj.\r")  
                                else:
                                    print(">>> Restart first traj.\r")  
                                    
                                bTrajRunning = True

                                trajstat.curstatus = trajstat.RESTART
                                trajstat.trajnum = TrajetoryNum
                                pub_TrajStat.publish(trajstat)

                            elif TrajetoryNum is 10:
                                #if run_trajnum == len(traj10_list):
                                if run_trajnum > 1:
                                    run_trajnum = len(traj10_list)
                                    print(">>> Restart final traj.\r")  
                                else:
                                    print(">>> Restart first traj.\r")  
                                    
                                bTrajRunning = True
                            
                                trajstat.curstatus = trajstat.RESTART
                                trajstat.trajnum = TrajetoryNum
                                pub_TrajStat.publish(trajstat)
                                    
                            elif TrajetoryNum is 5:
                                if run_trajnum > 1:
                                    run_trajnum = len(traj5_list)
                                    print(">>> Restart final traj.\r")  
                                else:
                                    print(">>> Restart first traj.\r")  
                                                            
                                bTrajRunning = True
                            
                                trajstat.curstatus = trajstat.RESTART
                                trajstat.trajnum = TrajetoryNum
                                pub_TrajStat.publish(trajstat)
                                    
                            elif TrajetoryNum is 6:
                                if run_trajnum > 1:
                                    run_trajnum = len(traj6_list)
                                    print(">>> Restart final traj.\r")  
                                else:
                                    print(">>> Restart first traj.\r")  

                                bTrajRunning = True
                            
                                trajstat.curstatus = trajstat.RESTART
                                trajstat.trajnum = TrajetoryNum
                                pub_TrajStat.publish(trajstat)
                                    
                            break

                        sleep(0.1)

 
if __name__=="__main__":

    
    settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('zetabank_dsr')
    rospy.on_shutdown(shutdown)

    pub_stop = rospy.Publisher('/'+ROBOT_ID +ROBOT_MODEL+'/stop', RobotStop, queue_size=10) 

    rospy.Subscriber("/EmergencyStop", UInt8, Callback_ESTop)          

    rospy.Subscriber("/dsr01m0609/state", RobotState, Callback_RobotState)

    rospy.Subscriber("/control_dsr_traj", ZBDSRSetTraj, CallbackRunTraj)

    pub_TrajStat = rospy.Publisher('/status_sdr_traj', ZBDSRTrajStatus, queue_size=10) 
    
    # 2022. 03. 03
    # rospy.Subscriber("/navi_ctrl_status", NavigationControlStatus, CallbackRunNaviCtrlStatus)
    
    # 2022. 03. 04
    rospy.Subscriber("/robot_control_status", RobotControlStatus, CallbackRobotControlStatus)
 
    #service_server = rospy.Service('/control_dsr_traj', DSRobot, callbackRunTraj)

    set_robot_mode(ROBOT_MODE_AUTONOMOUS)

    set_velx(30,20)  # set global task speed: 30(mm/sec), 20(deg/sec)
    set_accx(30,30)  # set global task accel: 60(mm/sec2), 40(deg/sec2)    

    print msg

 
    set_safe_stop_reset_type(1)

    run_trajnum = 1

    try :
        #print msg
        while(1):

            if DSRStatus == ZBDSRSetTraj.EXIT:
                print("Exit dsr control process...\r")
                break;

            key = getKey()

            if key == '0' :
                p20= posj(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) #Home
                movej(p20, vel=30, acc=40)
                
            else:
                if (key == '\x03'):
                    break

            if TrajetoryNum is 100:
                print("Move start joint angle...\r")
                movej(frontpos, vel=10, acc=20)
                run_trajnum = 1
                TrajetoryNum = 0
            elif TrajetoryNum is 101:
                print("Move zero position\r")
                zp = posj(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) #Home
                movej(zp, vel=30, acc=40)
                run_trajnum = 1
                TrajetoryNum = 0
                bTrajRunning = False
                bPrevStopFlag = False
                bStopFlag = False
                PrevTrajetoryNum = 0


            if DSRStatus is ZBDSRSetTraj.STOP and bTrajRunning == True:
                DSRStatus = 0
                bStopFlag = True
                bPrevStopFlag = bStopFlag
                print("Receive stop message...")
                print("Stopping trajectory number : %d\r" % (run_trajnum))
                trajstat.curstatus = trajstat.STOP
                trajstat.trajnum = TrajetoryNum
                pub_TrajStat.publish(trajstat)
                
            elif DSRStatus is ZBDSRSetTraj.RESTART and bStopFlag == True:
                bStopFlag = False
                DSRStatus = 0
                TrajetoryNum = PrevTrajetoryNum
                trajstat.curstatus = trajstat.START
                trajstat.trajnum = TrajetoryNum
                pub_TrajStat.publish(trajstat)

                trajstat.curstatus = trajstat.RESTART
                trajstat.trajnum = TrajetoryNum
                pub_TrajStat.publish(trajstat)

                print("Restarting trajectory number : %d\r" % (run_trajnum))

            elif DSRStatus is ZBDSRSetTraj.START and bStopFlag == True:
                bStopFlag = False
                bPrevStopFlag = False
                run_trajnum = 1
                print("Receive new start message...TJNum:%d" % (TrajetoryNum))

                trajstat.curstatus = trajstat.START
                trajstat.trajnum = TrajetoryNum
                pub_TrajStat.publish(trajstat)


            if bTrajRunning is True and bEStop is False:
                #print("Robot Status : {}\r".format(sRobotState))

                if bStopFlag == False and bPrevStopFlag == True:    # Restart robot
                    bPrevStopFlag= False

                    print("bPrevStopFlag")

                if sRobotState.find("STANDBY") > -1 and bStopFlag == False:

                    if TrajetoryNum is 1:
                        Run_DSRTraj1()
                    elif TrajetoryNum is 2:
                        Run_DSRTraj2()
                    elif TrajetoryNum is 3:
                        Run_DSRTraj3()
                    elif TrajetoryNum is 4:
                        Run_DSRTraj4()
                    elif TrajetoryNum is 5:
                        Run_DSRTraj5()
                    elif TrajetoryNum is 6:
                        Run_DSRTraj6()
                    elif TrajetoryNum is 7:
                        Run_DSRTraj7()
                    elif TrajetoryNum is 8:
                        Run_DSRTraj8()
                    elif TrajetoryNum is 9:
                        Run_DSRTraj9()
                    elif TrajetoryNum is 10:
                        Run_DSRTraj10()

                    PrevTrajetoryNum = TrajetoryNum

                    print("TRNUM:%d  PreTRNUM:%d\r" % (TrajetoryNum, PrevTrajetoryNum))


            sleep(0.1)


    except DR_Error:
        print e

    
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)