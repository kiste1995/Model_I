#!/usr/bin/env python

import rospy
import threading
import sys, select, termios, tty
import time
import os

from std_msgs.msg import String, UInt8
from dsr_msgs.msg import RobotState

from zetabank_msgs.srv import DSRobot, DSRobotResponse


sys.dont_write_bytecode = True
sys.path.append( os.path.abspath(os.path.join(os.path.dirname(__file__),"../../doosan-robot/common/imp")) ) # get import path : DSR_ROBOT.py 

# for single robot 
ROBOT_ID     = "dsr01"
ROBOT_MODEL  = "m0609"
import DR_init
DR_init.__dsr__id = ROBOT_ID
DR_init.__dsr__model = ROBOT_MODEL
from DSR_ROBOT import *

bEStop_Status = 0
cur_trajnum = 0
bTrajRunning = False
bEStop = False
sRobotState = "STANDBY"
TrajetoryNum = 0
DSRStatus = DSRobot.IDLING

def shutdown():
    print("shutdown time!")
    print("shutdown time!")
    print("shutdown time!")

    pub_stop.publish(stop_mode=STOP_TYPE_QUICK)
    return 0

def getKey():
    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

msg ="""
    Control Doosan Robot!
    ---------------------
    0 : Initial position
    1 : Sample pos #1(UVC)
    2 : Sample pos #2(Spray)
    3 : Move Joint Angle(Start pos)
    4 : Move Position(End pos)
    5 : Move Position(Start pos)
    ---------------------

Ctrl-C to quit.
"""

p1 = posx(573.83, 503.16, -194.0, 0.24, 138.64, -95.72) #p1                
p2 = posx(573.83, 503.16, -194.0 + 100.0, 0.24, 138.64, -95.72) #p2
p3 = posx(595.7, -451.86, -190.22 + 100.0, 4.81, 136.69, -90.33) #p3

p4 = posx(595.7, -451.86, -190.22 + 200.0, 4.81, 136.69, -90.33) #p4
p5 = posx(573.83, 503.16, -194.0 + 200.0, 0.24, 138.64, -95.72) #p5

p6 = posx(573.83, 503.16, -194.0 + 300.0, 0.24, 138.64, -95.72) #p6
p7 = posx(595.7, -451.86, -190.22 + 300.0, 4.81, 136.69, -90.33) #p7

p8 = posx(595.7, -451.86, -190.22 + 400.0, 4.81, 136.69, -90.33) #p8
p9 = posx(573.83, 503.16, -194.0 + 400.0, 0.24, 138.64, -95.72) #p9

p10 = posx(573.83, 503.16, -194.0 + 500.0, 0.24, 138.64, -95.72) #p10
p11 = posx(595.7, -451.86, -190.22 + 500.0, 4.81, 136.69, -90.33) #p11

startpos = posj(-42.33, 89.33, 41.79, -115.64, -33.9, -8.39) #start point

traj1_list = [p1, p2, p3, p4, p5]
trja2_list = [p6, p7, p8, p9, p10, p11]

def Run_DSRTraj1():
    global cur_trajnum
    global bTrajRunning

    for i in range(len(traj1_list)):
        print(">> Move p"+ i)
        movel(traj1_list[i], vel=150, acc = 200, ref=DR_BASE, mod=DR_MV_MOD_ABS)
        bTrajRunning = True
        cur_trajnum = cur_trajnum + 1

def Run_DSRTraj2():
    global cur_trajnum
    global bTrajRunning

    for i in range(len(traj2_list)):
        print(">> Move p"+ i)
        movel(traj2_list[i], vel=150, acc = 200, ref=DR_BASE, mod=DR_MV_MOD_ABS)
        bTrajRunning = True
        cur_trajnum = cur_trajnum + 1



def Run_RobotTrajectory():
    global cur_trajnum
    global bTrajRunning
    #print 'Start moving path...'

    if cur_trajnum == 0:
        print("Move p1...\r")
        cur_trajnum = 1
        movel(p1, vel=150, acc = 200, ref=DR_BASE, mod=DR_MV_MOD_ABS)
        bTrajRunning = True

    elif cur_trajnum == 1:
        print("Move p2...\r")
        cur_trajnum = 2
        movel(p2, vel=150, acc = 200, ref=DR_BASE, mod=DR_MV_MOD_ABS)
        bTrajRunning = True
        #print('cur : traj #2')
                
    elif cur_trajnum == 2:
        print("Move p3...\r")
        cur_trajnum = 3
        movel(p3, vel=150, acc = 200, ref=DR_BASE, mod=DR_MV_MOD_ABS)        
        bTrajRunning = True
        #print('cur : traj #3')

    elif cur_trajnum == 3:
        print("Move p4...\r")
        cur_trajnum = 4
        movel(p4, vel=150, acc = 200, ref=DR_BASE, mod=DR_MV_MOD_ABS)
        bTrajRunning = True

    elif cur_trajnum == 4:
        print("Move p5...\r")
        cur_trajnum = 5
        movel(p5, vel=150, acc = 200, ref=DR_BASE, mod=DR_MV_MOD_ABS)
        bTrajRunning = True

    elif cur_trajnum == 5:
        print("Move p6...\r")
        cur_trajnum = 6
        movel(p6, vel=150, acc = 200, ref=DR_BASE, mod=DR_MV_MOD_ABS)
        bTrajRunning = True

    elif cur_trajnum == 6:
        print("Move p7...\r")
        cur_trajnum = 7
        movel(p7, vel=150, acc = 200, ref=DR_BASE, mod=DR_MV_MOD_ABS)
        bTrajRunning = True

    elif cur_trajnum == 7:
        print("Move p8...\r")
        cur_trajnum = 8
        movel(p8, vel=150, acc = 200, ref=DR_BASE, mod=DR_MV_MOD_ABS)
        bTrajRunning = True

    elif cur_trajnum == 8:
        print("Move p9...\r")
        cur_trajnum = 9
        movel(p9, vel=150, acc = 200, ref=DR_BASE, mod=DR_MV_MOD_ABS)
        bTrajRunning = True

    elif cur_trajnum == 9:
        print("Move p10...\r")
        cur_trajnum = 10
        movel(p10, vel=150, acc = 200, ref=DR_BASE, mod=DR_MV_MOD_ABS)
        bTrajRunning = True

    elif cur_trajnum == 10:
        print("Move p11...\r")
        cur_trajnum = 11
        movel(p11, vel=150, acc = 200, ref=DR_BASE, mod=DR_MV_MOD_ABS)
        bTrajRunning = True

    elif cur_trajnum == 11:
        print("Done moving path...\r")
        bTrajRunning = False
    #else:
    #    bTrajRunning = False

def Callback_RobotState(rs):    
    global sRobotState

    sRobotState = rs.robot_state_str
    #print("Robot Status : {}\r".format(sRobotState))

def callbackRunTraj(request):

    print(request)

    TrajetoryNum = request.trajnum


def Callback_ESTop(msg):
    global bEStop_Status
    global bEStop
    global cur_trajnum
    global sRobotState
    global bTrajRunning

    bEStop_Status = msg.data
    #print("EStop Status : {}\r".format(bEStop_Status))

    if bEStop_Status != 0 and bEStop == False:
        if bEStop_Status == 1:
            print("Detected Lidar Field\r")
        elif bEStop_Status == 2:
            print("Pushed E-Stop Button\r")
        elif bEStop_Status == 3:
            print("Detected Lidar Field and Pushed E-Stop Button\r")

        bEStop = True
        #bTrajRunning = False

    elif bEStop == True and bEStop_Status == 0:
        print("Release E-stop/ Lidar detecting\r")

        

        if bTrajRunning is True:
            cur_trajnum = cur_trajnum - 1
            #if cur_trajnum == 11:
            #    cur_trajnum = 10
            
            #Run_RobotTrajectory()

            #bStateEStop = True

            while(1) :
                #print("Robot Status : {}\r".format(sRobotState))
                if sRobotState.find("STANDBY") > -1:
                    bEStop = False

                    print(">>> Restart running traj.\r")

                    bTrajRunning = False
                    Run_RobotTrajectory()

                    break

        else:
            bEStop = False

 
if __name__=="__main__":

    settings = termios.tcgetattr(sys.stdin)

    #print 'Running zetabank_dsr control...'
    
    rospy.init_node('zetabank_dsr')
    rospy.on_shutdown(shutdown)

    pub_stop = rospy.Publisher('/'+ROBOT_ID +ROBOT_MODEL+'/stop', RobotStop, queue_size=10) 

    rospy.Subscriber("/EmergencyStop", UInt8, Callback_ESTop)          

    rospy.Subscriber("/dsr01m0609/state", RobotState, Callback_RobotState)

    service_server = rospy.Service('/control_dsr_traj', ZBDSRTraj, callbackRunTraj)

    set_robot_mode(ROBOT_MODE_AUTONOMOUS)

    set_velx(30,20)  # set global task speed: 30(mm/sec), 20(deg/sec)
    set_accx(30,30)  # set global task accel: 60(mm/sec2), 40(deg/sec2)    

    #print 'Complete setting dsr...'
    #print 'Press key...0: init pos'
    print msg

 
    set_safe_stop_reset_type(1)


  
    try :
        #print msg
        while(1):
            key = getKey()

            if key == '1' :
                print("Start moving path...\r")
                if bTrajRunning is False:
                    bTrajRunning = True
                    cur_trajnum = 0
                    
                    Run_RobotTrajectory()

            elif key == '0' :
                p20= posj(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) #Home
                movej(p20, vel=30, acc=40)
            elif key == '2' :
                p21= posj(-0.0, 90.0, -60.0, 180.0, -60.0, 90.0) #wall spray
                movej(p21, vel=30, acc=40)
            elif key == '3' :
                print("Move start joint angle...\r")
                #p22= posj(-42.33, 89.33, 41.79, -115.64, -33.9, -8.39) #start point
                #movej(p22, vel=30, acc=40)                                
                movej(startpos, vel=30, acc=40)                                
            elif key == '4' :
                print 'Move position #1-1...'                
                movel(p4, vel = 60, acc=80, mod=DR_MV_MOD_ABS)
            elif key == '5' :
                print 'Move position #1-2...'                
                movel(p5, vel = 60, acc=80, mod=DR_MV_MOD_ABS)                
            elif key == '6' :
                print 'Move position #2-2...'
                movel(p6, vel = 60, acc=80, mod=DR_MV_MOD_ABS)                
            elif key == '7' :
                print 'Move position #2-1...'
                movel(p7, vel = 60, acc=80, mod=DR_MV_MOD_ABS)
            elif key == '8' :
                print 'Move position #3-1...'
                movel(p8, vel = 60, acc=80, mod=DR_MV_MOD_ABS)
            elif key == '9' :
                print 'Move position #3-2...'
                movel(p9, vel = 60, acc=80, mod=DR_MV_MOD_ABS)            
            else:
                if (key == '\x03'):
                    break

            if bTrajRunning is True and bEStop is False:
                print("Robot Status : {}\r".format(sRobotState))

                if sRobotState.find("STANDBY") > -1:
                    print("Move complete! Next move to next point...")
                    bTrajRunning = False
                    
                    Run_RobotTrajectory()


    except DR_Error:
        print e

    
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)